{"version":3,"sources":["webpack:///static/js/8.e5a03154a5d90fd74eab.js","webpack:///Polygon.vue","webpack:///./src/components/QuickStart/Polygon.vue?bcd6","webpack:///./src/components/QuickStart/Polygon.vue?a0b8","webpack:///./src/components/QuickStart/Polygon.vue?be61","webpack:///./src/components/QuickStart/Polygon.vue"],"names":["webpackJsonp","444","module","__webpack_exports__","__webpack_require__","Object","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default","n","__WEBPACK_IMPORTED_MODULE_1_vue2_google_maps__","use","load","key","name","data","center","lat","lng","map_geojson","dialog","methods","displayGeoJson","results","this","$refs","mymap","$mapObject","toGeoJson","geojson","loadControls","setControls","computed","historic_batch","$store","state","451","exports","push","i","version","sources","names","mappings","file","sourcesContent","sourceRoot","453","content","locals","460","render","_vm","_h","$createElement","_c","_self","attrs","row","wrap","staticClass","xs8","_v","staticStyle","font-weight","dark","left","default","nativeOn","click","$event","width","model","callback","$$v","expression","slot","directives","rawName","height","domProps","on","input","target","composing","_s","xs12","ref","zoom","staticRenderFns","81","injectStyle","ssrContext","Component"],"mappings":"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","file":"static/js/8.e5a03154a5d90fd74eab.js","sourcesContent":["webpackJsonp([8],{\n\n/***/ 444:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__ = __webpack_require__(63);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue2_google_maps__ = __webpack_require__(47);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue2_google_maps___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_vue2_google_maps__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vue__ = __webpack_require__(24);\n\n\n\n\n\n\n__WEBPACK_IMPORTED_MODULE_2_vue__[\"a\" /* default */].use(__WEBPACK_IMPORTED_MODULE_1_vue2_google_maps__, {\n  load: {\n    key: 'AIzaSyAucd0sk7vH1NjQyh3b2kN8qYKhdu4S1Ss'\n  }\n});\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'Polygon',\n  data: function data() {\n    return {\n      center: { lat: 33.7601, lng: -84.37429 },\n      map_geojson: null,\n      dialog: false\n    };\n  },\n\n  methods: {\n    displayGeoJson: function displayGeoJson() {\n      var results = void 0;\n      this.$refs.mymap.$mapObject.data.toGeoJson(function (geojson) {\n        results = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default()(geojson, null, 2);\n      });\n      this.map_geojson = results;\n    },\n    loadControls: function loadControls() {\n      this.$refs.mymap.$mapObject.data.setControls(['Polygon']);\n    }\n  },\n  computed: {\n    historic_batch: function historic_batch() {\n      return this.$store.state.historic_batch;\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 451:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(179)(true);\n// imports\n\n\n// module\nexports.push([module.i, \".geojson_output[data-v-610afa35]{width:100%}.geojson_output textarea[data-v-610afa35]{border-style:solid}\", \"\", {\"version\":3,\"sources\":[\"C:/Users/shuang/Desktop/Summer/scTrafficCount/web/src/components/QuickStart/Polygon.vue\"],\"names\":[],\"mappings\":\"AACA,iCACE,UAAY,CACb,AACD,0CACI,kBAAoB,CACvB\",\"file\":\"Polygon.vue\",\"sourcesContent\":[\"\\n.geojson_output[data-v-610afa35] {\\n  width: 100%;\\n}\\n.geojson_output textarea[data-v-610afa35] {\\n    border-style: solid;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ 453:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(451);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(180)(\"082bc96c\", content, true);\n\n/***/ }),\n\n/***/ 460:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('v-layout', {\n    attrs: {\n      \"row\": \"row\",\n      \"wrap\": \"wrap\"\n    }\n  }, [_c('v-flex', {\n    staticClass: \"my-3\",\n    attrs: {\n      \"xs8\": \"xs8\"\n    }\n  }, [_c('h6', [_vm._v(\"StreetTraffic Polygon section\")]), _c('p', [_vm._v(\"In this section, you can draw a polygon in the map to specify an area of which you will download traffic data from. To start, simply click the \"), _c('span', {\n    staticStyle: {\n      \"font-weight\": \"bold\"\n    }\n  }, [_vm._v(\"'Load Drawing Tools'\")]), _vm._v(\" button below, and start drawing. After you are finished, click the \"), _c('span', {\n    staticStyle: {\n      \"font-weight\": \"bold\"\n    }\n  }, [_vm._v(\"'Finished Drawing Polygon'\")]), _vm._v(\" button\")]), _c('p', [_vm._v(\"Note: right now we don't support self-intersecting polygon or multiple polygons\")]), _c('div', [_c('v-btn', {\n    staticClass: \"ml-0 mt-3\",\n    attrs: {\n      \"dark\": \"dark\",\n      \"left\": \"left\",\n      \"default\": \"default\"\n    },\n    nativeOn: {\n      \"click\": function($event) {\n        _vm.loadControls($event)\n      }\n    }\n  }, [_vm._v(\"1. Load Drawing Tools\")]), _c('v-dialog', {\n    attrs: {\n      \"width\": \"600px\"\n    },\n    model: {\n      value: (_vm.dialog),\n      callback: function($$v) {\n        _vm.dialog = $$v\n      },\n      expression: \"dialog\"\n    }\n  }, [_c('v-btn', {\n    staticClass: \"ml-0 mt-3\",\n    attrs: {\n      \"dark\": \"dark\",\n      \"left\": \"left\",\n      \"default\": \"default\"\n    },\n    nativeOn: {\n      \"click\": function($event) {\n        _vm.displayGeoJson($event)\n      }\n    },\n    slot: \"activator\"\n  }, [_vm._v(\"2. Finished Drawing Polygon\")]), _c('v-card', [_c('v-card-title', [_c('div', {\n    staticClass: \"headline\"\n  }, [_vm._v(\"Geojson Format (prettified)\")])]), _c('v-card-text', [_c('div', {\n    staticClass: \"geojson_output\"\n  }, [_c('textarea', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.map_geojson),\n      expression: \"map_geojson\"\n    }],\n    staticStyle: {\n      \"width\": \"100%\",\n      \"height\": \"300px\"\n    },\n    domProps: {\n      \"value\": (_vm.map_geojson)\n    },\n    on: {\n      \"input\": function($event) {\n        if ($event.target.composing) { return; }\n        _vm.map_geojson = $event.target.value\n      }\n    }\n  })])]), _c('v-card-title', [_c('div', {\n    staticClass: \"headline\"\n  }, [_vm._v(\"Geojson Format (uglified)\")])]), _c('v-card-text', [_c('p', [_vm._v(\"Now, simply copy the following json encoded string, and use map_resource.ultil.read_geojson_polygon() to generate a polygon\")]), _c('div', {\n    staticClass: \"geojson_output\"\n  }, [_c('div', [_vm._v(\"'\" + _vm._s(_vm.map_geojson) + \"'\")])])])], 1)], 1)], 1)]), _c('v-flex', {\n    staticClass: \"my-3\",\n    attrs: {\n      \"xs12\": \"\"\n    }\n  }, [_c('v-card', [_c('v-card-row', {\n    staticClass: \"green darken-1\"\n  }, [_c('v-card-title', [_c('span', {\n    staticClass: \"white--text\"\n  }, [_vm._v(\"The Map\")]), _c('v-spacer')], 1)], 1), _c('v-card-text', [_c('v-card-row', {\n    attrs: {\n      \"height\": \"auto\",\n      \"center\": \"\"\n    }\n  }, [_c('gmap-map', {\n    ref: \"mymap\",\n    staticStyle: {\n      \"width\": \"100%\",\n      \"height\": \"500px\"\n    },\n    attrs: {\n      \"center\": _vm.center,\n      \"zoom\": 14\n    }\n  })], 1)], 1)], 1)], 1)], 1)\n},staticRenderFns: []}\n\n/***/ }),\n\n/***/ 81:\n/***/ (function(module, exports, __webpack_require__) {\n\nfunction injectStyle (ssrContext) {\n  __webpack_require__(453)\n}\nvar Component = __webpack_require__(8)(\n  /* script */\n  __webpack_require__(444),\n  /* template */\n  __webpack_require__(460),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  \"data-v-610afa35\",\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/8.e5a03154a5d90fd74eab.js","<template lang=\"pug\">\r\n  v-layout(row wrap)\r\n    v-flex.my-3(xs8)\r\n      h6 StreetTraffic Polygon section\r\n      p\r\n        | In this section, you can draw a polygon in the map to specify an area of which you will download traffic data from. To start, simply click the \r\n        span(style='font-weight:bold') 'Load Drawing Tools'\r\n        |  button below, and start drawing. After you are finished, click the \r\n        span(style='font-weight:bold') 'Finished Drawing Polygon'\r\n        |  button\r\n      p Note: right now we don't support self-intersecting polygon or multiple polygons\r\n      div\r\n        v-btn.ml-0.mt-3(dark left default @click.native='loadControls') 1. Load Drawing Tools\r\n        v-dialog(v-model='dialog', width='600px')\r\n          v-btn.ml-0.mt-3(dark left default @click.native='displayGeoJson', slot='activator') 2. Finished Drawing Polygon\r\n          v-card\r\n            v-card-title\r\n              .headline Geojson Format (prettified)\r\n            v-card-text\r\n              .geojson_output\r\n                textarea(style='width: 100%; height: 300px', v-model='map_geojson')\r\n            v-card-title\r\n              .headline Geojson Format (uglified)\r\n            v-card-text\r\n              p\r\n                | Now, simply copy the following json encoded string, and use map_resource.ultil.read_geojson_polygon() to generate a polygon\r\n              .geojson_output\r\n                div '{{map_geojson}}'\r\n    v-flex.my-3(xs12='')\r\n      v-card\r\n        v-card-row.green.darken-1\r\n          v-card-title\r\n            span.white--text The Map\r\n            v-spacer\r\n        v-card-text\r\n          v-card-row(height='auto', center='')\r\n            gmap-map(ref='mymap', :center='center', :zoom='14', style='width: 100%; height: 500px')\r\n\r\n</template>\r\n\r\n<script>\r\nimport * as VueGoogleMaps from 'vue2-google-maps'\r\nimport Vue from 'vue'\r\n\r\nVue.use(VueGoogleMaps, {\r\n  load: {\r\n    key: 'AIzaSyAucd0sk7vH1NjQyh3b2kN8qYKhdu4S1Ss'\r\n    // libraries: 'places', //// If you need to use place input\r\n  }\r\n})\r\n\r\nexport default {\r\n  name: 'Polygon',\r\n  data () {\r\n    return {\r\n      center: {lat: 33.7601, lng: -84.37429}, // {lat: 34.91623, lng: -82.42907}  Furman   {lat: 33.7601, lng: -84.37429} Atlanta\r\n      map_geojson: null,\r\n      dialog: false\r\n    }\r\n  },\r\n  methods: {\r\n    displayGeoJson() {\r\n      let results\r\n      this.$refs.mymap.$mapObject.data.toGeoJson((geojson) => {\r\n        results = JSON.stringify(geojson, null, 2)\r\n      })\r\n      this.map_geojson = results\r\n    },\r\n    loadControls() {\r\n      this.$refs.mymap.$mapObject.data.setControls(['Polygon'])\r\n    }\r\n  },\r\n  computed: {\r\n    historic_batch() {\r\n      return this.$store.state.historic_batch\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add 'scoped' attribute to limit CSS to this component only -->\r\n<style lang=\"sass\" scoped>\r\n\r\n.geojson_output \r\n  width: 100%\r\n  \r\n  textarea \r\n    border-style: solid\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// Polygon.vue?7a6126d2","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".geojson_output[data-v-610afa35]{width:100%}.geojson_output textarea[data-v-610afa35]{border-style:solid}\", \"\", {\"version\":3,\"sources\":[\"C:/Users/shuang/Desktop/Summer/scTrafficCount/web/src/components/QuickStart/Polygon.vue\"],\"names\":[],\"mappings\":\"AACA,iCACE,UAAY,CACb,AACD,0CACI,kBAAoB,CACvB\",\"file\":\"Polygon.vue\",\"sourcesContent\":[\"\\n.geojson_output[data-v-610afa35] {\\n  width: 100%;\\n}\\n.geojson_output textarea[data-v-610afa35] {\\n    border-style: solid;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-610afa35\",\"scoped\":true,\"hasInlineConfig\":false}!./~/sass-loader/lib/loader.js?{\"indentedSyntax\":true,\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/QuickStart/Polygon.vue\n// module id = 451\n// module chunks = 8","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-610afa35\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/sass-loader/lib/loader.js?{\\\"indentedSyntax\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./Polygon.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"082bc96c\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-610afa35\",\"scoped\":true,\"hasInlineConfig\":false}!./~/sass-loader/lib/loader.js?{\"indentedSyntax\":true,\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/QuickStart/Polygon.vue\n// module id = 453\n// module chunks = 8","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('v-layout', {\n    attrs: {\n      \"row\": \"row\",\n      \"wrap\": \"wrap\"\n    }\n  }, [_c('v-flex', {\n    staticClass: \"my-3\",\n    attrs: {\n      \"xs8\": \"xs8\"\n    }\n  }, [_c('h6', [_vm._v(\"StreetTraffic Polygon section\")]), _c('p', [_vm._v(\"In this section, you can draw a polygon in the map to specify an area of which you will download traffic data from. To start, simply click the \"), _c('span', {\n    staticStyle: {\n      \"font-weight\": \"bold\"\n    }\n  }, [_vm._v(\"'Load Drawing Tools'\")]), _vm._v(\" button below, and start drawing. After you are finished, click the \"), _c('span', {\n    staticStyle: {\n      \"font-weight\": \"bold\"\n    }\n  }, [_vm._v(\"'Finished Drawing Polygon'\")]), _vm._v(\" button\")]), _c('p', [_vm._v(\"Note: right now we don't support self-intersecting polygon or multiple polygons\")]), _c('div', [_c('v-btn', {\n    staticClass: \"ml-0 mt-3\",\n    attrs: {\n      \"dark\": \"dark\",\n      \"left\": \"left\",\n      \"default\": \"default\"\n    },\n    nativeOn: {\n      \"click\": function($event) {\n        _vm.loadControls($event)\n      }\n    }\n  }, [_vm._v(\"1. Load Drawing Tools\")]), _c('v-dialog', {\n    attrs: {\n      \"width\": \"600px\"\n    },\n    model: {\n      value: (_vm.dialog),\n      callback: function($$v) {\n        _vm.dialog = $$v\n      },\n      expression: \"dialog\"\n    }\n  }, [_c('v-btn', {\n    staticClass: \"ml-0 mt-3\",\n    attrs: {\n      \"dark\": \"dark\",\n      \"left\": \"left\",\n      \"default\": \"default\"\n    },\n    nativeOn: {\n      \"click\": function($event) {\n        _vm.displayGeoJson($event)\n      }\n    },\n    slot: \"activator\"\n  }, [_vm._v(\"2. Finished Drawing Polygon\")]), _c('v-card', [_c('v-card-title', [_c('div', {\n    staticClass: \"headline\"\n  }, [_vm._v(\"Geojson Format (prettified)\")])]), _c('v-card-text', [_c('div', {\n    staticClass: \"geojson_output\"\n  }, [_c('textarea', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.map_geojson),\n      expression: \"map_geojson\"\n    }],\n    staticStyle: {\n      \"width\": \"100%\",\n      \"height\": \"300px\"\n    },\n    domProps: {\n      \"value\": (_vm.map_geojson)\n    },\n    on: {\n      \"input\": function($event) {\n        if ($event.target.composing) { return; }\n        _vm.map_geojson = $event.target.value\n      }\n    }\n  })])]), _c('v-card-title', [_c('div', {\n    staticClass: \"headline\"\n  }, [_vm._v(\"Geojson Format (uglified)\")])]), _c('v-card-text', [_c('p', [_vm._v(\"Now, simply copy the following json encoded string, and use map_resource.ultil.read_geojson_polygon() to generate a polygon\")]), _c('div', {\n    staticClass: \"geojson_output\"\n  }, [_c('div', [_vm._v(\"'\" + _vm._s(_vm.map_geojson) + \"'\")])])])], 1)], 1)], 1)]), _c('v-flex', {\n    staticClass: \"my-3\",\n    attrs: {\n      \"xs12\": \"\"\n    }\n  }, [_c('v-card', [_c('v-card-row', {\n    staticClass: \"green darken-1\"\n  }, [_c('v-card-title', [_c('span', {\n    staticClass: \"white--text\"\n  }, [_vm._v(\"The Map\")]), _c('v-spacer')], 1)], 1), _c('v-card-text', [_c('v-card-row', {\n    attrs: {\n      \"height\": \"auto\",\n      \"center\": \"\"\n    }\n  }, [_c('gmap-map', {\n    ref: \"mymap\",\n    staticStyle: {\n      \"width\": \"100%\",\n      \"height\": \"500px\"\n    },\n    attrs: {\n      \"center\": _vm.center,\n      \"zoom\": 14\n    }\n  })], 1)], 1)], 1)], 1)], 1)\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-610afa35\"}!./~/vue-loader/lib/template-compiler/preprocessor.js?engine=pug!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/QuickStart/Polygon.vue\n// module id = 460\n// module chunks = 8","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-610afa35\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"indentedSyntax\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./Polygon.vue\")\n}\nvar Component = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Polygon.vue\"),\n  /* template */\n  require(\"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-610afa35\\\"}!../../../node_modules/vue-loader/lib/template-compiler/preprocessor?engine=pug!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./Polygon.vue\"),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  \"data-v-610afa35\",\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/QuickStart/Polygon.vue\n// module id = 81\n// module chunks = 8"],"sourceRoot":""}